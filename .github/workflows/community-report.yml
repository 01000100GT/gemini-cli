name: Generate Weekly Community Report üìä

on:
  schedule:
    - cron: '0 12 * * 1' # Run at 12:00 UTC on Monday
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days to look back for the report'
        required: true
        default: 7
        type: number
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

jobs:
  generate-report:
    name: Generate Report üìù
    runs-on: ubuntu-22.04  # Ensures bash 5.1+ with associative arrays
    timeout-minutes: 25
    permissions:
      issues: write
      pull-requests: read
      discussions: read
      contents: read
      id-token: write

    steps:
      - name: Generate GitHub App Token üîë
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: üìÅ Checkout Repository
        uses: actions/checkout@v4

      - name: ÔøΩ Install Newer Bash (if needed)
        if: runner.os == 'Linux'
        run: |
          # Check if we need to install a newer bash
          if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
            echo "Installing newer bash version..."
            sudo apt-get update
            sudo apt-get install -y bash
          fi

      - name: ÔøΩüêö Setup Bash
        run: |
          echo "=== Current Bash Information ==="
          echo "Bash version: $BASH_VERSION"
          echo "Bash location: $(which bash)"
          bash --version
          
          echo "=== Checking Bash Version Requirements ==="
          BASH_MAJOR_VERSION=${BASH_VERSION%%.*}
          echo "Major version: $BASH_MAJOR_VERSION"
          
          if [[ $BASH_MAJOR_VERSION -lt 4 ]]; then
            echo "‚ùå Bash version 4+ required, current: $BASH_VERSION"
            echo "Attempting to install newer bash..."
            
            # Update package list and install newer bash
            sudo apt-get update
            sudo apt-get install -y bash
            
            # Check if installation was successful
            NEW_BASH_VERSION=$(bash --version | head -n1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            echo "New bash version: $NEW_BASH_VERSION"
          else
            echo "‚úÖ Bash version $BASH_VERSION is compatible"
          fi
          
          echo "=== Final Bash Information ==="
          bash --version

      - name: Generate Report üìú
        id: report
        shell: bash
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPO: ${{ github.repository }}
          DAYS: ${{ github.event.inputs.days || '7' }}
          DEBUG: ${{ github.event.inputs.debug || 'false' }}
        run: |
          # Ensure we're using bash 4+ features
          if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
            echo "‚ùå Bash version 4+ required for associative arrays"
            exit 1
          fi
          
          ./.github/scripts/generate-community-report.sh

      - name: ü§ñ Get Insights from Report
        if: steps.report.outputs.report_body != ''
        id: insights
        uses: google-gemini/gemini-cli-action@41c0f1b3cbd1a0b284251bd1aac034edd07a3a2f
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          version: 0.1.8-rc.0
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GCP_SERVICE_ACCOUNT: ${{ secrets.OTLP_GCP_SERVICE_ACCOUNT }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(gh issue list)",
                "run_shell_command(gh pr list)",
                "run_shell_command(gh search issues)",
                "run_shell_command(gh search prs)"
              ]
            }
          prompt: |
            You are a helpful assistant that analyzes community contribution reports for open source projects.
            
            Based on the following raw data, create a comprehensive community insights report that includes:
            
            1. **Executive Summary**: Brief overview of community activity
            2. **Key Findings**: Main insights from the data
            3. **Contribution Patterns**: Analysis of issue/PR/discussion trends
            4. **Community Health**: Assessment of engagement levels
            5. **Actionable Recommendations**: Specific steps to improve community engagement
            6. **Notable Trends**: Any interesting patterns or changes
            
            Format your response as a well-structured markdown report that can be shared with stakeholders.
            Include the raw data table at the end for reference.
            
            Keep the tone professional but engaging, and focus on actionable insights.

            Raw Data:
            ${{ steps.report.outputs.report_body }}

      - name: üìù Create Issue with Report
        if: steps.insights.outputs.response != '' && github.event_name == 'schedule'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # # Create an issue with the weekly report
          # gh issue create \
          #   --title "üìä Weekly Community Insights Report - $(date +'%Y-%m-%d')" \
          #   --body "${{ steps.insights.outputs.response }}" \
          #   --label "report,community,automated,insights" \
          #   --repo ${{ github.repository }}
          echo "Issue posting skipped (not configured)"

      - name: üí¨ Post to Discussions (Optional)
        if: steps.insights.outputs.response != '' && github.event_name == 'schedule'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Optionally post to discussions
          # Uncomment the following lines if you want to post to discussions
          # gh api graphql -f query='
          #   mutation($repositoryId: ID!, $categoryId: ID!, $body: String!, $title: String!) {
          #     createDiscussion(input: {repositoryId: $repositoryId, categoryId: $categoryId, body: $body, title: $title}) {
          #       discussion {
          #         id
          #       }
          #     }
          #   }' -f repositoryId="$(gh api repos/${{ github.repository }} --jq .node_id)" \
          #     -f categoryId="CATEGORY_ID_HERE" \
          #     -f title="üìä Weekly Community Insights Report - $(date +'%Y-%m-%d')" \
          #     -f body="${{ steps.insights.outputs.response }}"
          echo "Discussion posting skipped (not configured)"
